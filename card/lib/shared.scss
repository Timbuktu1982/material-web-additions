@use '@material/feature-targeting';
@use "@material/card";
@use '@material/rtl';

@include card.without-ripple;

$query: feature-targeting.all();
$feat-color: feature-targeting.create-target($query, color);
$feat-structure: feature-targeting.create-target($query, structure);

:host {
  display: inline-flex;
}

:host(:not([clickable])) {
  cursor: default;
}

.mdc-card {
  width: inherit;
  height: inherit;
  padding: var(--md-card-padding, 0);
  margin: var(--md-card-margin, 0);
  flex: 1;
  z-index: 0;

  .mdc-card__ripple {
    z-index: 0;
    --md-ripple-state-layer-shape: var(--_container-shape);
  }

  .mdc-card__primary-action {
    flex: 1;

    &.mdc-card__primary-action--disabled {
      cursor: initial;
    }
  }

  .mdc-card__media {
    flex: 1;
    background-color: inherit;
    border-radius: inherit;
    //@include theme.property(background-image, custom-properties.create(--mdc-card-media-background-image, none));
  }

  md-elevation {
    inset: 0;
    position: absolute;
    z-index: -1;
  }
}

::slotted(img:first-child) {
  border-top-left-radius: var(--_container-shape);
  border-top-right-radius: var(--_container-shape);
}

/* Set styles for .mdc-card__action based on slot. Styles will not be available from Light DOM. */
slot::slotted(.mdc-card__action) {
  @include feature-targeting.targets($feat-structure) {
    @include card.actions-layout_(inline-flex);
    align-items: initial;

    justify-content: center;
    user-select: none;
  }
}

/* Set styles for .mdc-card__action:focus based on slot. Styles will not be available from Light DOM. */
slot::slotted(.mdc-card__action:focus) {
  @include feature-targeting.targets($feat-structure) {
    outline: none;
  }
}

/* Set styles for .mdc-card__action--button based on slot. Styles will not be available from Light DOM. */
slot[name="button"]::slotted(.mdc-card__action--button) {
  @include feature-targeting.targets($feat-structure) {
    @include rtl.reflexive-box(margin, right, 8px);
  }
}

/* Set styles for .mdc-card__action--button:last-child based on slot. Styles will not be available from Light DOM. */
slot[name="button"]::slotted(.mdc-card__action--button:last-child) {
  @include feature-targeting.targets($feat-structure) {
    @include rtl.reflexive-box(margin, right, 0);
  }
}

/* Set styles for .mdc-card__actions-full-bleed .mdc-card__action--button based on slot. Styles will not be available from Light DOM. */
.mdc-card__actions--full-bleed slot[name="button"]::slotted(.mdc-card__action--button) {
  @include feature-targeting.targets($feat-structure) {
    justify-content: space-between;
    width: 100%;
    height: auto;
    max-height: none;
    margin: 0;
    // padding: 8px 16px;
    /* @noflip */
    text-align: left;
  }

  @include rtl.rtl {
    @include feature-targeting.targets($feat-structure) {
      /* @noflip */
      text-align: right;
    }
  }
}

/* Set styles for .mdc-card__action--icon based on slot. Styles will not be available from Light DOM. */
slot[name="icon"]::slotted(.mdc-card__action--icon) {
  @include feature-targeting.targets($feat-structure) {
    // Icon buttons are taller than buttons, so we need to adjust their margins to prevent the action row from expanding.
    margin: -6px 0;

    // Same padding as mdc-icon-button.
    // padding: 12px;
  }
}

/* Set styles for .mdc-card__action--icon:not(:disabled) based on slot. Styles will not be available from Light DOM. */
slot[name="icon"]::slotted(.mdc-card__action--icon:not(:disabled)) {
  @include feature-targeting.targets($feat-color) {
    //@include theme.property(color, text-icon-on-background);
  }
}
