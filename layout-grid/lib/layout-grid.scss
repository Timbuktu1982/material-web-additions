@use 'sass:map';
@use 'sass:list';
@use "@material/layout-grid";
@use "@material/layout-grid/mdc-layout-grid";

div.mdc-layout-grid {
  background: inherit;
  border: inherit;
}

div.mdc-layout-grid, div.mdc-layout-grid__inner {
  max-width: inherit;
  width: inherit;
  min-width: inherit;
  height: inherit;
  max-height: inherit;
  min-height: inherit;
}

@function cell($selector: '') {
  @return "::slotted(*#{$selector})"
}

@function cell_attribute($attribute, $value) {
  @return cell('[#{$attribute}="#{$value}"]')
}

#{cell()} {
  @extend .mdc-layout-grid__cell;

  $upper-breakpoint: list.nth(map.keys(layout-grid.$columns), 1);

  @each $size in map.keys(layout-grid.$columns) {
    @include layout-grid.media-query_($size) {
      $gutter: map.get(layout-grid.$default-gutter, $size);

      @for $span from 1 through map.get(layout-grid.$columns, $upper-breakpoint) {
        // Span classes.
        //noinspection SassScssUnresolvedVariable
        @at-root #{cell_attribute('grid-span', $span)}, #{cell_attribute('grid-span-#{$size}', $span)} {
          @include layout-grid.cell-span_($size, $span, $gutter);
        }
      }
    }
  }

  // Order override classes.
  @for $i from 1 through map.get(layout-grid.$columns, $upper-breakpoint) {
    //noinspection SassScssUnresolvedVariable
    @at-root #{cell_attribute('grid-order', $i)} {
      @include layout-grid.cell-order($i);
    }
  }


}

// Alignment classes.
@each $position in ('top', 'middle', 'bottom') {
  #{cell_attribute('grid-align', $position)} {
    @include layout-grid.cell-align(#{$position});
  }
}
